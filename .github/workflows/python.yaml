name: Test & Release

on:
  push:
    branches:
      - main
  pull_request:


env:
  CIBW_BEFORE_BUILD: pip install -r requirements-dev.txt
  CIBW_BEFORE_TEST: pip install -r requirements-dev.txt
  CIBW_TEST_COMMAND: pytest {project}/test_graphlib.py
  # Install curl on manylinux_2 images (others have it) and then install cargo and rust
  CIBW_BEFORE_ALL_LINUX: "((apt-get update && apt-get install curl || true) && (curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable)) || apk add rust cargo"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'
      - name: Install deps
        run: pip install -U maturin
      - name: Build sdist
        run: maturin build --release --strip
      - uses: actions/upload-artifact@v2
        with:
          path: ./dist/*.tar.gz
          name: dist
  build_wheels:
    name: Build native wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp37-macosx_* cp37-win* cp37-manylinux
          CIBW_ENVIRONMENT_LINUX: 'PATH="$PATH:$HOME/.cargo/bin"'
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ./wheelhouse/*.whl
  # build_wheels_aarch64:
  #   name: Build aarch64 wheels on ubuntu-latest
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: '3.7'
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #       with:
  #         platforms: all
  #     - name: Install cibuildwheel
  #       run: |
  #         python -m pip install cibuildwheel
  #     - name: Build wheels
  #       run: |
  #         python -m cibuildwheel --output-dir wheelhouse
  #       env:
  #         CIBW_SKIP: pp* *win32
  #         CIBW_ARCHS_LINUX: aarch64
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ./wheelhouse/*.whl
  # build_wheels_ppc64le:
  #   name: Build ppc64le wheels on ubuntu-latest
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: '3.7'
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #       with:
  #         platforms: all
  #     - name: Install cibuildwheel
  #       run: |
  #         python -m pip install cibuildwheel
  #     - name: Build wheels
  #       run: |
  #         python -m cibuildwheel --output-dir wheelhouse
  #       env:
  #         CIBW_SKIP: cp39-* cp310-* pp* *win32
  #         CIBW_ARCHS_LINUX: ppc64le
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ./wheelhouse/*.whl
  # build_wheels_ppc64le_part2:
  #   name: Build ppc64le wheels on ubuntu-latest
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: '3.7'
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #       with:
  #         platforms: all
  #     - name: Install cibuildwheel
  #       run: |
  #         python -m pip install cibuildwheel
  #     - name: Build wheels
  #       run: |
  #         python -m cibuildwheel --output-dir wheelhouse
  #       env:
  #         CIBW_SKIP: cp36-* cp37-* cp38-* pp* *win32
  #         CIBW_ARCHS_LINUX: ppc64le
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ./wheelhouse/*.whl
  # build_wheels_s390x:
  #   name: Build s390x wheels on ubuntu-latest
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: '3.7'
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #       with:
  #         platforms: all
  #     - name: Install cibuildwheel
  #       run: |
  #         python -m pip install cibuildwheel
  #     - name: Build wheels
  #       run: |
  #         python -m cibuildwheel --output-dir wheelhouse
  #       env:
  #         CIBW_SKIP: cp39-* cp310-* pp* *win32
  #         CIBW_ARCHS_LINUX: s390x
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ./wheelhouse/*.whl
  # build_wheels_s390x_part2:
  #   name: Build s390x wheels on ubuntu-latest
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: '3.7'
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1
  #       with:
  #         platforms: all
  #     - name: Install cibuildwheel
  #       run: |
  #         python -m pip install cibuildwheel
  #     - name: Build wheels
  #       run: |
  #         python -m cibuildwheel --output-dir wheelhouse
  #       env:
  #         CIBW_SKIP: cp36-* cp37-* cp38-* pp* *win32
  #         CIBW_ARCHS_LINUX: s390x
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ./wheelhouse/*.whl
  # build-mac-arm-wheels:
  #   name: Build arm and universal2 wheels on macos-latest
  #   runs-on: macos-10.15
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build wheels
  #       uses: joerick/cibuildwheel@v2.0.1
  #       env:
  #         CIBW_BEFORE_ALL: rustup target add aarch64-apple-darwin
  #         CIBW_ARCHS_MACOS: arm64 universal2
  #         CIBW_ENVIRONMENT: CARGO_BUILD_TARGET="aarch64-apple-darwin" PYO3_CROSS_LIB_DIR="/Library/Frameworks/Python.framework/Versions/$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')/lib/python$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')"
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ./wheelhouse/*.whl
  # build-win32-wheels:
  #   name: Build wheels on win32
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: '3.7'
  #         architecture: 'x86'
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         target: i686-pc-windows-msvc
  #         default: true
  #     - name: Force win32 rust
  #       run: rustup default stable-i686-pc-windows-msvc
  #     - name: Install cibuildwheel
  #       run: |
  #         python -m pip install cibuildwheel
  #     - name: Build wheels
  #       run: |
  #         python -m cibuildwheel --output-dir wheelhouse
  #       env:
  #         CIBW_SKIP: pp* *amd64
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: ./wheelhouse/*.whl
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.x'
  #     - name: Install Rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         default: true
  #     - name: Lint
  #       run: |
  #         make lint
  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
      - sdist
      # - build-win32-wheels
      # - build-mac-arm-wheels
      # - build_wheels_s390x_part2
      # - build_wheels_s390x
      # - build_wheels_s390x
      # - build_wheels_ppc64le_part2
      # - build_wheels_ppc64le
      # - build_wheels_aarch64
      - build_wheels
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: dist
      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade twine pip
          twine upload --skip-existing *
