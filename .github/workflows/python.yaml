name: Test & Release

on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-wheels:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    matrix:
      os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.0
        env:
          CIBW_BEFORE_TEST: "pip install -r requirements-dev.txt"
          CIBW_TEST_COMMAND: "pre-commit run --all-files && pytest {project}/test_graphlib.py"
          # On an Linux Intel runner with qemu installed, build Intel and ARM wheels
          # Note that we will only test the native wheels
          CIBW_ARCHS_LINUX: "auto aarch64 ppc64le s390x"
          # Build `universal2` and `arm64` wheels on an Intel runner.
          # Note that the `arm64` wheel and the `arm64` part of the `universal2`
          # wheel cannot be tested in this configuration.
          CIBW_ARCHS_MACOS: "x86_64 arm64 universal2"
          CIBW_TEST_SKIP: "*-*linux_{aarch64,ppc64le,s390x} *-macosx_arm64 *-macosx_universal2:arm64"
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse
  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [build-wheels]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
